import me.modmuss50.mpp.ReleaseType
import net.fabricmc.loom.task.RemapJarTask

plugins {
	id("dynamic_fps.module")
	alias(libs.plugins.shadow)
	alias(libs.plugins.mod.publish.plugin)
}

architectury {
	platformSetupLoomIde()
	forge()
}

loom {
	accessWidenerPath = project(":platforms:common").loom.accessWidenerPath

	forge {
		convertAccessWideners = true
		extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

		mixinConfig "dynamic_fps.mixins.json"
		mixinConfig "dynamic_fps-common.mixins.json"
	}
}

configurations {
	common
	shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
	compileClasspath.extendsFrom common
	runtimeClasspath.extendsFrom common
	developmentForge.extendsFrom common
}

dependencies {
	forge libs.forge

	include(libs.battery)

	compileOnly(libs.mixinextras.common)
	annotationProcessor(libs.mixinextras.common)

	include(libs.mixinextras.forge)
	implementation(libs.mixinextras.forge)

	common(project(path: ":platforms:common", configuration: "namedElements")) { transitive = false }
	shadowCommon(project(path: ":platforms:common", configuration: "transformProductionForge")) { transitive = false }
}

shadowJar {
	exclude "fabric.mod.json"
	exclude "architectury.common.json"

	configurations = [project.configurations.shadowCommon]
}

remapJar {
	input.set shadowJar.archiveFile
	dependsOn shadowJar
}

sourcesJar {
	def commonSources = project(":platforms:common").sourcesJar
	dependsOn commonSources
	from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
	withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
		skip()
	}
}

var modVersion = project.property("mod_version").toString()

publishMods {
	version = modVersion
	displayName = "v${modVersion}"

	type = modVersion.contains("-") ? ReleaseType.BETA : ReleaseType.STABLE;
	modLoaders.addAll(project.property("supported_platforms").toString().split(","))

	changelog = file(rootDir.toPath().resolve("changelog.txt")).text
	file = tasks.withType(RemapJarTask).named("remapJar").get().archiveFile
	additionalFiles.from(tasks.withType(Jar).named("sourcesJar").get().archiveFile)

	curseforge {
		accessToken = providers.environmentVariable("CURSEFORGE_SECRET")
		projectId = "335493"

		minecraftVersionRange {
			start = project.property("minecraft_version_min").toString()
			end = project.property("minecraft_version_max").toString()
		}

		clientRequired = true
		serverRequired = false

		optional("cloth-config")
	}

	modrinth {
		accessToken = providers.environmentVariable("MODRINTH_SECRET")
		projectId = "LQ3K71Q1"

		minecraftVersionRange {
			start = project.property("minecraft_version_min").toString()
			end = project.property("minecraft_version_max").toString()
		}

		optional("cloth-config")
	}
}
